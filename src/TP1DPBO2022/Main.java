/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package TP1DPBO2022;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;

/**
 *
 * @author Rahma Maulida
 * Saya Rahma Maulida 2003688 mengerjakan Latihan 3 dalam mata kuliah 
 * Desain Pemrograman Berorientasi Objek untuk keberkahan-Nya maka saya 
 * tidak melakukan kecurangan seperti yang telah dispesifikasikan. Aamiin.
 * 
 */

public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    // koneksi ke database
    dbConnection dbcon = new dbConnection();
    
    private int mode = 1;       // tampilan defaultnya adalah buku (1 untuk buku, 2 untuk author)
    private String picture = "";// ini untuk menampilkan gambar
    public static java.sql.Statement stm;
    
    public Main() {
        // tampilan awal
        initComponents();
        tblData.setModel((TableModel)dbcon.readTable(mode));
        lblPicture.setVisible(true);
        pnlData.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBuku = new javax.swing.JButton();
        btnAuthor = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        lblJudul = new javax.swing.JLabel();
        pnlData = new javax.swing.JPanel();
        lblPicture = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblPublisher = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        lblPictureTitle = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        tfPublisher = new javax.swing.JTextField();
        tfDescription = new javax.swing.JTextField();
        btnAddPicture = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBuku.setText("Buku");
        btnBuku.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBukuMouseClicked(evt);
            }
        });
        btnBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBukuActionPerformed(evt);
            }
        });

        btnAuthor.setText("Author");
        btnAuthor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAuthorMouseClicked(evt);
            }
        });
        btnAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAuthorActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblData);

        lblJudul.setFont(new java.awt.Font("Segoe UI Semibold", 0, 36)); // NOI18N
        lblJudul.setText("Book Database");
        lblJudul.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        pnlData.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblPicture.setBackground(new java.awt.Color(153, 153, 153));
        lblPicture.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblTitle.setText("Title");

        lblPublisher.setText("Publisher");

        lblDescription.setText("Description");

        lblPictureTitle.setText("Picture");

        tfTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfTitleActionPerformed(evt);
            }
        });

        btnAddPicture.setText("Add Picture");
        btnAddPicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPictureActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUpdateMouseClicked(evt);
            }
        });
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDataLayout = new javax.swing.GroupLayout(pnlData);
        pnlData.setLayout(pnlDataLayout);
        pnlDataLayout.setHorizontalGroup(
            pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDataLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblPictureTitle)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDataLayout.createSequentialGroup()
                            .addComponent(lblTitle)
                            .addGap(27, 27, 27)))
                    .addComponent(lblPublisher)
                    .addComponent(lblDescription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDataLayout.createSequentialGroup()
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tfPublisher, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfDescription)
                    .addComponent(btnAddPicture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfTitle))
                .addGap(32, 32, 32))
        );
        pnlDataLayout.setVerticalGroup(
            pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDataLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDataLayout.createSequentialGroup()
                        .addGroup(pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTitle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPublisher))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDescription))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPictureTitle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnBuku, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
            .addGroup(layout.createSequentialGroup()
                .addGap(189, 189, 189)
                .addComponent(lblJudul)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblJudul)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBuku, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(pnlData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // mode book
        if(mode == 1){
            // pastikan text field tidak kosong
            if(!tfTitle.getText().isEmpty() && !tfPublisher.getText().isEmpty() && !tfDescription.getText().isEmpty() && !picture.isEmpty()){
                // masukan disimpan ke variabel penampung untuk query ke database
                String title = tfTitle.getText();
                String publisher = tfPublisher.getText();
                String description = tfDescription.getText();
                btnAddPictureActionPerformed(evt);
                String pict = picture;
                
                // insert data dari variabel penampung ke database
                dbcon.Query("insert into books (title, photo_name, publisher, description) values ('"+title+"', '"+pict+"', '"+publisher+"', '"+description+"')");
                
                // kosongkan field dan tampilkan kembali tabel yang sudah diupdate
                tfTitle.setText("");
                tfPublisher.setText("");
                tfDescription.setText("");
                lblPicture.setVisible(true);
                tblData.setModel((TableModel)dbcon.readTable(mode));
                
                // tampilan jika sukses
                System.out.println("Data inserted successfully!");
                JOptionPane.showMessageDialog(null, "Succesfully insert new data");
            }
            // jika text field masih ada yang kosong
            else{
                // tampilan kalau field tidak boleh kosong
                JOptionPane.showMessageDialog(null, "Field cannot be empty!"); 
            }
        }
        // mode author
        else {
            // pastikan text field tidak kosong
            if(!tfTitle.getText().isEmpty() && !tfPublisher.getText().isEmpty() && !tfDescription.getText().isEmpty() && !picture.isEmpty()){
                // masukan disimpan ke variabel penampung untuk query ke database
                String name = tfTitle.getText();
                String nationality = tfPublisher.getText();
                String bookCount = tfDescription.getText();
                String pict = picture;
                
                dbcon.Query("insert into author (name, photo_name, nationality, bookCount) values ('"+name+"', '"+pict+"', '"+nationality+"', '"+bookCount+"')");
                
                // kosongkan field dan tampilkan kembali tabel yang sudah diupdate
                tfTitle.setText("");
                tfPublisher.setText("");
                tfDescription.setText("");
                lblPicture.setVisible(true);
                tblData.setModel((TableModel)dbcon.readTable(mode));
                
                // tampilan jika sukses
                System.out.println("Data inserted successfully!");
                JOptionPane.showMessageDialog(null, "Succesfully insert new data");
            }
            // jika text field masih ada yang kosong
            else{
                // tampilan kalau field tidak boleh kosong
                JOptionPane.showMessageDialog(null, "Field cannot be empty!"); 
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnAuthorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAuthorMouseClicked
        mode = 2;
        // label di-rename sesuai atribut pada tabel author
        lblTitle.setText("Name");
        lblPublisher.setText("Nationality");
        lblDescription.setText("Book Count");
        lblPictureTitle.setText("Picture");
        lblPicture.setVisible(true);
        pnlData.setVisible(true);
        
        // kosongkan text field
        tfTitle.setText("");
        tfPublisher.setText("");
        tfDescription.setText("");
        picture = "";
        
        // tampilkan tabel
        tblData.setModel((TableModel)dbcon.readTable(mode));
    }//GEN-LAST:event_btnAuthorMouseClicked

    private void btnBukuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBukuMouseClicked
        mode = 1;
        
        // label di-rename sesuai atribut pada tabel books
        lblTitle.setText("Title");
        lblPublisher.setText("Publisher");
        lblDescription.setText("Description");
        lblPictureTitle.setText("Picture");
        lblPicture.setVisible(true);
        pnlData.setVisible(true);
        
        // kosongkan text field
        tfTitle.setText("");
        tfPublisher.setText("");
        tfDescription.setText("");
        picture = "";
        
        // tampilkan tabel
        tblData.setModel((TableModel)dbcon.readTable(mode));
    }//GEN-LAST:event_btnBukuMouseClicked

    private void btnAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAuthorActionPerformed
    }//GEN-LAST:event_btnAuthorActionPerformed

    private void btnBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBukuActionPerformed
    }//GEN-LAST:event_btnBukuActionPerformed

    private void tfTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfTitleActionPerformed
    }//GEN-LAST:event_tfTitleActionPerformed

    private void btnAddPictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPictureActionPerformed
        
        JFileChooser jfc = new JFileChooser();
        lblPicture.setVisible(true);
        int res = jfc.showOpenDialog(null);
        
        if(res == JFileChooser.APPROVE_OPTION) {
            File f = jfc.getSelectedFile();
            
            ImageIcon icon = new ImageIcon(f.toString());
            Image image = icon.getImage().getScaledInstance(lblPicture.getWidth(), lblPicture.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon selectedPicture = new ImageIcon(image);

            lblPicture.setIcon(selectedPicture);
            picture = f.toString();
           
            System.out.println("Picture inserted successfully!");
            JOptionPane.showMessageDialog(null, "Succesfully insert new picture");
        }
        else{
            System.out.println("Picture doesn't inserted successfully!");
            JOptionPane.showMessageDialog(null, "Please choose picture!");
        }
    }//GEN-LAST:event_btnAddPictureActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // mode buku
        if(mode == 1){
            try {
                // ambil masukan dari text field
                String title = tfTitle.getText();
                String pict = picture;
                String publisher = tfPublisher.getText();
                String description = tfDescription.getText();
                
                // tampung judulnya 
                String titleChange = tblData.getValueAt(tblData.getSelectedRow(), 1).toString();
                
                // query update ke database
                dbcon.Query("update books set title = '"+title+"', photo_name = '"+pict+"', publisher = '"+publisher+"', description = '"+description+"' where title = '"+titleChange+"'");
                
                // tampilkan tabel yang sudah diupdate
                tblData.setModel(dbcon.readTable(mode));
                
                // kosongkan text field
                tfTitle.setText("");
                lblPicture.setText("");
                tfPublisher.setText("");
                tfDescription.setText("");
                
                // notifikasi sukses
                System.out.println("Data successfully updated!");
                JOptionPane.showMessageDialog(null, "Succesfully update data");
            }
            // notifikasi ketika text field tidak terisi semua
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Please fill out the form!"); 
            }
        }
        // mode author
        else{
            try {
                // ambil masukan dari text field
                String name = tfTitle.getText();
                String pict = picture;
                String nationality = tfPublisher.getText();
                String bookCount = tfDescription.getText();
                
                // tampung nama author
                String authorChange = tblData.getValueAt(tblData.getSelectedRow(), 1).toString();
                
                // query update ke database
                dbcon.Query("update author set name = '"+name+"', photo_name = '"+pict+"', nationality = '"+nationality+"', description = '"+bookCount+"' where name = '"+authorChange+"'");
                
                // tampilkan tabel yang sudah diupdate
                tblData.setModel(dbcon.readTable(mode));
                
                // kosongkan text field
                tfTitle.setText("");
                lblPicture.setText("");
                tfPublisher.setText("");
                tfDescription.setText("");
                
                 // notifikasi sukses
                System.out.println("Data successfully updated!");
                JOptionPane.showMessageDialog(null, "Succesfully update data");
            }
            // notifikasi ketika text field tidak terisi semua
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Please fill out the form!"); 
            }
        }
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked
        // tampung data dari baris yang dipilih
        int row = tblData.getSelectedRow();
        String selectedTitle = (tblData.getModel().getValueAt(row, 1).toString());
        String selectedPicture = (tblData.getModel().getValueAt(row, 2).toString());
        String selectedPublisher = (tblData.getModel().getValueAt(row, 3).toString());
        String selectedDescription = (tblData.getModel().getValueAt(row, 4).toString());
        
        // menampilkan gambar dari baris yang dipilih
        BufferedImage pict = null;
        try{
            pict = ImageIO.read(new File("src/resources/"+selectedPicture));
            Image dimg = pict.getScaledInstance(100, 150, Image.SCALE_SMOOTH);
            lblPicture.setIcon(new javax.swing.ImageIcon(dimg));
        }catch(IOException e){
             e.printStackTrace();
        }
        
        // menampilkan data dari baris yang dipilih
        tfTitle.setText(selectedTitle);
        lblPicture.setText(selectedPicture);
        tfPublisher.setText(selectedPublisher);
        tfDescription.setText(selectedDescription);
    }//GEN-LAST:event_tblDataMouseClicked

    private void btnUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateMouseClicked
    }//GEN-LAST:event_btnUpdateMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // kedua mode sama untuk delete
        try {    
            // ambil title book / author name yang akan dihapus
            String deleted = tblData.getValueAt(tblData.getSelectedRow(), 1).toString();
            // query untuk menghapus datanya dari database
            if(mode == 1){// tabel books
                dbcon.Query("delete from books where title = '"+deleted+"'");
            }
            else{// tabel author
                dbcon.Query("delete from author where name = '"+deleted+"'");
            }
            
            // tampilkan tabel yang sudah dihapus datanya
            tblData.setModel(dbcon.readTable(mode));
            // kosongkan text field
            tfTitle.setText("");
            lblPicture.setText("");
            tfPublisher.setText("");
            tfDescription.setText("");
            
            // notifikasi berhasil dihapus
            System.out.println("Data successfully deleted!");
            JOptionPane.showMessageDialog(null, "Succesfully delete data");
        }
        // notifikasi ketika text field belum diisi
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please fill out the form!"); 
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddPicture;
    private javax.swing.JButton btnAuthor;
    private javax.swing.JButton btnBuku;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblJudul;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JLabel lblPictureTitle;
    private javax.swing.JLabel lblPublisher;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlData;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField tfDescription;
    private javax.swing.JTextField tfPublisher;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables
}
